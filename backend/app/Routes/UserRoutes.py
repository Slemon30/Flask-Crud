from flask import jsonify, request, Blueprint
from app.Models.User import User
from app.Middleware.PasswordHashing import hash_pw

routes = Blueprint('routes', __name__)

@routes.route("/")
def hello_world():
    return "<p>Hello, World!</p>"

@routes.get("/users")
def get_users():
    try:
        userlist= []
        for user in User.objects:
            userdict = {}
            userdict["id"] = str(user.id)
            userdict["name"] = user.Name
            userdict["email"] = user.Email
            # userdict["password"] = user.Password
            userlist.append(userdict)
        return jsonify(userlist)
    except Exception as e:
        return jsonify({"error" : "Internal server error", "details" : str(e)}) 

@routes.post("/users")
def create_user():
    try:
        userData = request.form
        name = userData.get("Name")
        email = userData.get("Email")
        password = userData.get("Password")
        if not name or not email or not password:
            return jsonify({ "error": "User data not complete" })
        password = hash_pw(password)
        
        newuser = User(Name = name, Email = email, Password = password)
        newuser.save()
        return jsonify({"message" : "User saved succesfully"})
    except Exception as e:
        return jsonify({"error" : "Internal server error", "details" : str(e)})  
    
@routes.get("/users/<id>") #Finding via _id generated by MongoDB
def get_user(id):
    try:
        user = User.objects(id = id).first()
        if not user:
            return jsonify({"message" : "User not found"})
        userData = {
            "id" : str(id),
            "Name" : user.Name,
            "Email" : user.Email,
            "Password" : user.Password
        }
        return jsonify({"message": "User found", "UserDetails" : userData})
    except Exception as e:
        return jsonify({"error" : "Internal server error", "details" : str(e)}) 

@routes.put("/users/<id>")
def update_user(id):
    try:
        user = User.objects(id = id).first()
        if not user:
            return jsonify({"message" : "User not found"})
        newData = request.form
        name = newData.get("Name")
        email = newData.get("Email")
        password = newData.get("Password")
        if name:
            user.Name = name
        if email:
            user.Email = email
        if password:
            newPassword = hash_pw(password)
            user.Password = newPassword
        
        user.save()
        return jsonify({"message" : "User data updated successfully"})

    except Exception as e:
        return jsonify({"error" : "Internal server error", "details" : str(e)}) 
    
@routes.delete("/users/<id>")
def delete_user(id):
    try:
        user = User.objects(id = id).first()
        if not user:
            return jsonify({"message" : "User not found"})
        user.delete()
        return jsonify({"message" : "User deleted successfully"})
    except Exception as e:
        return jsonify({"error" : "Internal server error", "details" : str(e)}) 
